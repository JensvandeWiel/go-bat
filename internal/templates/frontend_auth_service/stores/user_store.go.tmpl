package stores

import (
	"{{ .PackageName }}/database/models"
	"context"
	"database/sql"
	"errors"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jmoiron/sqlx"
)

var (
	ErrorUserNotFound = errors.New("user not found")
	ErrorInvalidUser  = errors.New("invalid user")
	ErrorUserExists   = errors.New("user already exists")
)

type UserStore interface {
	GetUserById(ctx context.Context, id int32) (*models.User, error)
	GetUserByEmail(ctx context.Context, email string) (*models.User, error)
	CreateUser(ctx context.Context, user *models.User) (int64, error)
	DeleteUser(ctx context.Context, id int32) error
}

type DatabaseUserStore struct {
	db *sqlx.DB
}

func NewDatabaseUserStore(db *sqlx.DB) UserStore {
	return &DatabaseUserStore{
		db: db,
	}
}

func (s *DatabaseUserStore) GetUserById(ctx context.Context, id int32) (*models.User, error) {
	user := &models.User{}
	err := s.db.GetContext(ctx, user, "SELECT * FROM users WHERE id = $1", id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrorUserNotFound
		}
		return nil, err
	}
	return user, nil
}

func (s *DatabaseUserStore) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	if email == "" {
		return nil, ErrorInvalidUser
	}
	user := &models.User{}
	err := s.db.GetContext(ctx, user, "SELECT * FROM users WHERE email = $1", email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrorUserNotFound
		}
		return nil, err
	}
	return user, nil
}

func (s *DatabaseUserStore) CreateUser(ctx context.Context, user *models.User) (int64, error) {
	if user == nil {
		return 0, ErrorInvalidUser
	}
	if user.Email == "" || user.Password == "" || user.Name == "" || len(user.Password) < 8 {
		return 0, ErrorInvalidUser
	}

	query := "INSERT INTO users (email, password, name) VALUES ($1, $2, $3) RETURNING id"
	var id int64
	err := s.db.QueryRowContext(ctx, query, user.Email, user.Password, user.Name).Scan(&id)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			if pgErr.Code == "23505" { // Unique violation
				return 0, ErrorUserExists
			}
		}
		return 0, err
	}
	return id, nil
}

func (s *DatabaseUserStore) DeleteUser(ctx context.Context, id int32) error {
	res, err := s.db.ExecContext(ctx, "DELETE FROM users WHERE id = $1", id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrorUserNotFound
	}

	return nil
}
